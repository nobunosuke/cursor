---
description: Gitコミット時のルール
alwaysApply: false
---

# Gitコミット時のルール

このドキュメントでは、コミットメッセージの規約と、AIによるコミット支援のルールを定義します。

## コミットメッセージの規約

[Conventional Commits v1.0.0](https://www.conventionalcommits.org/en/v1.0.0/) に準拠し、日本語でメッセージを記述します。

### 基本構造

```
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
```

### 主要なtype

- **feat**: 新機能の追加
- **fix**: バグ修正
- **docs**: ドキュメントのみの変更
- **style**: コードの動作に影響しない変更（空白、フォーマットなど）
- **refactor**: バグ修正や機能追加を伴わないコードの変更
- **perf**: パフォーマンス改善
- **test**: テストの追加・修正
- **build**: ビルドシステムや外部依存関係の変更
- **ci**: CI設定ファイルやスクリプトの変更
- **chore**: その他の変更

### Breaking Change

- `BREAKING CHANGE:` フッターを使用するか、typeの後に `!` を付ける

### 例

```
feat(auth): ユーザー認証機能を追加

JWT トークンによる認証機能を実装しました。
- ログインエンドポイント
- トークン検証ミドルウェア
- リフレッシュトークン機能

docs: READMEにセットアップ手順を追加

fix(api): ログイン時のトークン検証エラーを修正

refactor: コード構造を整理

chore: 共有ルールを最新版に更新
```

## AIによるコミット支援

### コミットタイミングの判断

AI は以下の条件を満たす場合にコミットを提案します：

1. タスクファイルのすべてのタスクが完了している
2. 実装が論理的に完結している
3. ユーザーが明示的にコミットを指示した

詳細は `@cursor-tasks.mdc` を参照してください。

### コミット前の確認

**AI がコミットを実行する前に**:

1. 変更内容を確認
   ```bash
   git status
   git diff --staged
   ```

2. 適切なコミットメッセージを生成
   - Conventional Commits の形式に従う
   - 変更内容を的確に表現
   - 日本語で記述

3. ユーザーに提案し、承認を得てから実行

### コミット実行手順

```bash
# 1. 変更をステージング
git add <files>

# 2. コミット
git commit -m "<type>: <description>"

# 3. プッシュ（必要に応じて）
git push origin <branch-name>
```

## 参考

- [Conventional Commits v1.0.0](https://www.conventionalcommits.org/en/v1.0.0/)
- [Cursor - AI Commit Message](https://docs.cursor.com/ja/more/ai-commit-message)
- @cursor-tasks.mdc - タスク管理とコミットタイミング
- @git/worktree.mdc - worktree でのコミット
