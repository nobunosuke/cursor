---
description: Gitコミット時のルール
alwaysApply: false
---

# Gitコミット時のルール

このドキュメントでは、コミット時に必ず守るべきルールと、コミットメッセージの規約を定義します。

## このルールの適用対象

**一般的なプロジェクト**（チームでCursorを使っていない、または個人利用の場合）

**適用除外**:
- Cursorルール開発リポジトリ（`.cursor/` が開発対象そのもの）
- チームでCursorを使っているプロジェクト（`.cursor/` を共有する場合）
- ユーザーが明示的に「`.cursor/` をコミットする」と指示した場合

> **AIへの指示**: ユーザーが「`.cursor/` をコミットする」「`.cursor/` も含めてコミット」など、明示的に `.cursor/` のコミットを指示した場合は、このルールを無視してください。

## 必須ルール: .cursor/ の除外

### 基本原則

**コミット前に必ず `.cursor/` を除外してください。**

`.cursor/` ディレクトリは Git 管理下に置きますが、**コミット時には除外します**。

### なぜこの運用にするのか？

**Git管理下に置く理由**:
- ✅ git worktree で新しいブランチを作成した際に、`.cursor/` が自動的に引き継がれる

**コミット時に除外する理由**:
- チームメンバーに影響を与えない（個人の作業環境を強制しない）
- リモートリポジトリを不要なファイルで汚さない

### コミット前のチェックリスト

```bash
# 1. ステージングエリアを確認
git status

# 2. .cursor/ が含まれていないか確認
# もし含まれていたら除外する
git restore --staged .cursor/

# 3. コミット
git commit -m "feat: 新機能を追加"

# 4. プッシュ前に再度確認（念のため）
git show HEAD --name-only | grep .cursor
# 何も表示されなければOK

# 5. プッシュ
git push origin <branch-name>
```

### トラブルシューティング

#### 誤って .cursor/ を add してしまった場合

```bash
# ステージングエリアから削除（ファイルは残る）
git restore --staged .cursor/
```

#### 誤って .cursor/ をコミットしてしまった場合

```bash
# 方法1: 直前のコミットをやり直す
git reset HEAD~
git add .  # .cursor/ 以外を add（または個別にファイルを指定）
git commit -m "..."

# 方法2: コミットを修正（コミットメッセージはそのまま）
git reset HEAD~
git restore --staged .cursor/
git commit -C ORIG_HEAD

# 方法3: rebase で修正（複数コミット前の場合）
git rebase -i HEAD~N
# エディタで該当コミットを 'edit' に変更
git restore --staged .cursor/
git commit --amend --no-edit
git rebase --continue
```

#### 誤って .cursor/ をリモートにプッシュしてしまった場合

```bash
# ⚠️ 注意: force push が必要です（チームへの影響を考慮してください）

# 1. コミットから .cursor/ を削除
git rm -r --cached .cursor/
git commit -m "chore: .cursor/ をリポジトリから削除"

# 2. 強制プッシュ（慎重に実行）
git push --force origin <branch-name>

# または、他のメンバーが影響を受けない場合
git push --force-with-lease origin <branch-name>
```

## コミットメッセージの規約

[Conventional Commits v1.0.0](https://www.conventionalcommits.org/en/v1.0.0/) に準拠し、日本語でメッセージを記述します（[Cursor のコミット機能](https://docs.cursor.com/ja/more/ai-commit-message)と同じ）。

### 基本構造

冗長になることもあるが AI が `git log` で変更内容を理解しやすくなるのでおすすめです。

```
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
```

### 主要なtype

- **feat**: 新機能の追加
- **fix**: バグ修正
- **docs**: ドキュメントのみの変更
- **style**: コードの動作に影響しない変更（空白、フォーマットなど）
- **refactor**: バグ修正や機能追加を伴わないコードの変更
- **perf**: パフォーマンス改善
- **test**: テストの追加・修正
- **build**: ビルドシステムや外部依存関係の変更
- **ci**: CI設定ファイルやスクリプトの変更
- **chore**: その他の変更

### Breaking Change

- `BREAKING CHANGE:` フッターを使用するか、typeの後に `!` を付ける

### 例

```
feat(auth): ユーザー認証機能を追加

JWT トークンによる認証機能を実装しました。
- ログインエンドポイント
- トークン検証ミドルウェア
- リフレッシュトークン機能

docs: READMEにセットアップ手順を追加

fix(api): ログイン時のトークン検証エラーを修正

refactor: コード構造を整理
```

## AIによるコミット支援

### コミットタイミングの判断

AI は以下の条件を満たす場合にコミットを提案します：

1. タスクファイルのすべてのタスクが完了している
2. 実装が論理的に完結している
3. ユーザーが明示的にコミットを指示した

詳細は `@cursor-tasks.mdc` を参照してください。

### コミット前の自動チェック

**AI がコミットを実行する前に**:

1. ユーザーが「`.cursor/` をコミットする」と明示的に指示していないか確認
   - 指示されている場合: このルールを無視し、`.cursor/` を含めてコミット
   - 指示されていない場合: 以下のチェックを実行

2. `.cursor/` がステージングエリアに含まれていないか確認:
   ```bash
   git status | grep .cursor
   ```

3. 含まれている場合は除外を提案:
   - 「`.cursor/` がステージングエリアに含まれています。除外しますか？」
   - ユーザーが承認したら `git restore --staged .cursor/` を実行

## 参考

- [Conventional Commits v1.0.0](https://www.conventionalcommits.org/en/v1.0.0/)
- [Cursor - AI Commit Message](https://docs.cursor.com/ja/more/ai-commit-message)
- @cursor-tasks.mdc - タスク管理とコミットタイミング
- @git/worktree.mdc - worktree でのコミット
