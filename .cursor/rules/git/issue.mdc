---
description: GitHubイシュー駆動開発ワークフロー
alwaysApply: false
---

# GitHubイシュー駆動開発ワークフロー

## 概要

GitHubでイシューを作成した後、AIがworktree作成・タスクファイル作成を支援します。

> **注**: このルールは初期セットアップ（イシュー作成後のworktree・タスクファイル作成）を支援するものです。手動でworktreeを作成した場合でも、タスクファイル作成・開発進行は @cursor-tasks.mdc のルールに従います。

## AI支援の範囲

ユーザーがイシュー情報をAIに伝えた場合、以下を自動実行：
1. worktree の作成
2. タスクファイル作成（ユーザーに確認後）

すべて手動で行うことも可能です。

## 基本フロー（AI支援を使う場合）

1. **GitHubでイシューを作成**（手動）
2. **worktreeをAIに作成してもらう**
3. **タスクファイルで開発を進める**（@cursor-tasks.mdc）

## worktree作成

### イシュー情報の抽出

ユーザーから以下の情報を受け取る：
- **イシュー番号**: 例 `#42`
- **タイトル**: 例「ユーザー認証機能を実装」

### ブランチ名の生成

@cursor-tasks.mdc の命名規則 `{type}/{id}-{description}` に従う。

typeはタイトルから推測（feat/fix/docs/refactor/testなど、詳細は @cursor-tasks.mdc を参照）。

例：
- `#42: ユーザー認証機能を実装` → `feat/42-user-authentication`
- `#123: ログインエラーを修正` → `fix/123-login-error`

### ブランチ作成の実行

#### worktreeとして作成（デフォルト）

基本的にworktreeとして作成します。ユーザーに提案してから実行：

1. **worktreeパスを生成**:
   - 推奨: `../worktrees/{type}-{id}-{description}`
   - 例: `../worktrees/feat-42-user-authentication`

2. **worktreeを作成**:
   ```bash
   git worktree add ../worktrees/{type}-{id}-{description} -b {type}/{id}-{description} main
   ```

3. **ユーザーに通知**:
   - 「worktree `../worktrees/{type}-{id}-{description}` を作成しました。」
   - 「次のコマンドでCursorで開いてください:」
   - 「`cursor {absolute-path}/worktrees/{type}-{id}-{description}`」

詳細は @git/worktree.mdc を参照。

## タスクファイルの作成

worktree作成後、**ユーザーに確認してから**対応するタスクファイルを作成（@cursor-tasks.mdc の規則に従う）。

**重要**: タスクファイルは作成したworktreeディレクトリ配下の `.cursor/tasks/` に作成すること。

例：
- ブランチ: `feat/42-user-authentication`
- worktree: `../worktrees/feat-42-user-authentication`
- タスクファイル: `../worktrees/feat-42-user-authentication/.cursor/tasks/FEAT-42_user-authentication.md`

descriptionのゴールをタスクリストに変換し、Implementation Planに技術的な計画を記載。

**ワークフロー**:
1. worktree作成完了後、「タスクファイルも作成しますか？」とユーザーに確認
2. ユーザーが承認した場合のみ、worktreeディレクトリ配下にタスクファイルを作成
3. 勝手にタスクファイルを作成しない

## 参考

- @cursor-tasks.mdc - タスク管理の基本ルール
- @git/worktree.mdc - worktree の使い方
- @git/commit.mdc - コミット時のルール
- @global.mdc - グローバルルール
