---
description: Git Worktree による並列開発ワークフロー
alwaysApply: false
---

# Git Worktree による並列開発ワークフロー

## 概要

このプロジェクトでは、git worktreeを基本的なブランチ作成方法として採用しています。

git worktreeを使用することで、同じリポジトリの異なるブランチを複数のディレクトリで同時に作業でき、AI駆動開発で複数のイシューを並列実装することが可能になります。

## git worktreeとは

git worktreeは、同じGitリポジトリの異なるブランチを複数のディレクトリで同時にチェックアウトできる機能です。

**公式ドキュメント**: https://git-scm.com/docs/git-worktree

### メリット
- **並列作業**: 複数のブランチで同時に開発可能
- **コンテキストスイッチ不要**: ブランチ切り替え（`git checkout`）なしで複数の作業を進行
- **独立した作業環境**: 各worktreeは独立したワーキングディレクトリを持つ

### ディレクトリ構造

```
projects/
  main/                            # プライマリworktree（メインリポジトリ）
    .git/
    .cursor/
    README.md
    src/
  worktrees/                       # worktree専用ディレクトリ
    feat-42-user-authentication/   # worktree（ブランチ: feat/42-user-authentication）
      .cursor/
      README.md
      src/
    fix-43-login-error/            # worktree（ブランチ: fix/43-login-error）
      .cursor/
      README.md
      src/
```

各worktreeでCursorを開けば、それぞれ独立した環境として動作します。

## 命名規則

worktreeのディレクトリ名は、ブランチ名からスラッシュを削除したものを推奨します：
- ブランチ `feat/42-user-authentication` → worktree `feat-42-user-authentication`
- ブランチ `fix/43-login-error` → worktree `fix-43-login-error`

## 基本コマンド

### worktreeの作成

```bash
# メインリポジトリから実行
cd ~/projects/main

# 新しいworktreeを作成（ブランチは既存）
git worktree add <path> <branch>

# 例: feat/42-feature-aブランチをworktreeとして追加
git worktree add ../worktrees/feat-42-feature-a feat/42-feature-a

# 新しいブランチを作成しながらworktreeを追加
git worktree add -b <new-branch> <path> <start-point>

# 例: mainブランチから新しいブランチを作成してworktreeを追加
git worktree add -b feat/44-new-feature ../worktrees/feat-44-new-feature main
```

### worktreeの確認

```bash
# worktree一覧を表示
git worktree list
```

### worktreeの削除

```bash
# worktreeを削除（変更がコミット済みの場合）
git worktree remove <path>

# 例:
git worktree remove ../worktrees/feat-42-feature-a

# 強制削除（未コミットの変更があっても削除）
git worktree remove --force <path>
```

## イシューワークフローとの統合

イシュー作成後のブランチ作成は、worktreeとして作成します。詳細は @git/issue.mdc を参照してください。

## 注意点

1. **同じブランチを複数worktreeでcheckoutできない**
   - エラー: `fatal: 'feat/42-feature-a' is already checked out at '...'`
   - 解決策: 別のブランチを使用するか、既存のworktreeを削除

2. **worktree削除前に変更をコミット**
   - 未コミットの変更があると、`git worktree remove` が失敗する
   - 強制削除 (`--force`) は変更を失う可能性があるため注意

3. **worktreeのパスは相対パスでも絶対パスでもOK**
   - 推奨: メインリポジトリの親ディレクトリに `worktrees/` を作成
   - 例: `main/` と `worktrees/` を同じ階層に配置

## 参考資料

### 公式ドキュメント
- [Git - git-worktree Documentation](https://git-scm.com/docs/git-worktree) - 公式ドキュメント

### 解説記事
- [徹底解説：git worktree の使い方](https://qiita.com/syukan3/items/dab71e88ce91bca44432) - 基本的な使い方
- [Git Worktreeをわかりやすく解説](https://zenn.dev/hiraoku/articles/56f4f9ffc6d186) - 初心者向け解説

### 関連ドキュメント
- @cursor-tasks.mdc - タスク管理ルール
- @git/issue.mdc - イシューワークフロー
- @git/commit.mdc - コミットメッセージ規約
