---
description: Git Worktree による並列開発ワークフロー
alwaysApply: false
---

# Git Worktree による並列開発ワークフロー

## 概要

git worktreeを使用して、同じリポジトリの異なるブランチを複数のディレクトリで同時に作業できる環境を提供します。これにより、AI駆動開発で複数のイシューを並列実装することが可能になります。

## git worktreeとは

git worktreeは、同じGitリポジトリの異なるブランチを複数のディレクトリで同時にチェックアウトできる機能です。

**公式ドキュメント**: https://git-scm.com/docs/git-worktree

### メリット
- **並列作業**: 複数のブランチで同時に開発可能
- **コンテキストスイッチ不要**: ブランチ切り替え（`git checkout`）なしで複数の作業を進行
- **独立した作業環境**: 各worktreeは独立したワーキングディレクトリを持つ

### ディレクトリ構造

```
~/projects/
  main/                          # プライマリworktree（メインリポジトリ）
    .git/                        # Gitリポジトリ本体（全worktreeで共有）
      worktrees/                 # worktreeメタデータ
        feat-42-feature-a/       # worktree Aのメタデータ
        feat-43-feature-b/       # worktree Bのメタデータ
    .cursor/                     # mainブランチのCursor設定
      rules/
      tasks/
    README.md
    src/
  
  worktrees/                     # worktree専用ディレクトリ
    feat-42-feature-a/          # worktree A
      .git                       # ファイル（main/.git/worktrees/feat-42-feature-a へのポインタ）
      .cursor/                   # feat/42-feature-aブランチのCursor設定
      README.md                  # feat/42-feature-aブランチの内容
      src/                       # feat/42-feature-aブランチの内容
    feat-43-feature-b/          # worktree B
      .git                       # ファイル（main/.git/worktrees/feat-43-feature-b へのポインタ）
      .cursor/                   # feat/43-feature-bブランチのCursor設定
      README.md                  # feat/43-feature-bブランチの内容
      src/                       # feat/43-feature-bブランチの内容
```

**重要**:
- 各worktreeディレクトリには、そのブランチのファイルが全てチェックアウトされます
- `.git`はディレクトリではなく**ファイル**で、メインリポジトリへのポインタが書かれています
- `.cursor/`などのファイルは、そのブランチの内容がそのまま存在します（シンボリックリンクではありません）
- 各worktreeでCursorを開けば、それぞれ独立した環境として動作します

## 基本コマンド

### worktreeの作成

```bash
# メインリポジトリから実行
cd ~/projects/main

# 新しいworktreeを作成（ブランチは既存）
git worktree add <path> <branch>

# 例: feat/42-feature-aブランチをworktreeとして追加
git worktree add ../worktrees/feat-42-feature-a feat/42-feature-a

# 新しいブランチを作成しながらworktreeを追加
git worktree add -b <new-branch> <path> <start-point>

# 例: mainブランチから新しいブランチを作成してworktreeを追加
git worktree add -b feat/44-new-feature ../worktrees/feat-44-new-feature main
```

### worktreeの確認

```bash
# worktree一覧を表示
git worktree list

# 出力例:
# /Users/horinoburo/projects/main            abc1234 [main]
# /Users/horinoburo/projects/worktrees/feat-42-feature-a  def5678 [feat/42-feature-a]
# /Users/horinoburo/projects/worktrees/feat-43-feature-b  ghi9012 [feat/43-feature-b]
```

### worktreeの削除

```bash
# worktreeを削除（変更がコミット済みの場合）
git worktree remove <path>

# 例:
git worktree remove ../worktrees/feat-42-feature-a

# 強制削除（未コミットの変更があっても削除）
git worktree remove --force <path>

# 孤立したworktreeメタデータを削除
git worktree prune
```

## AI駆動開発での活用

### ユースケース: 複数イシューの並列作業

**シナリオ**: イシュー #42（機能A）とイシュー #43（機能B）を同時に進めたい

#### 手順

1. **イシュー #42 のセットアップ**
   ```bash
   cd ~/projects/main
   git worktree add ../worktrees/feat-42-feature-a feat/42-feature-a
   ```

2. **Cursorで開く**
   - Cursorで `~/projects/worktrees/feat-42-feature-a` を開く
   - AIに「タスクを進めてください」と指示
   - AIは自動的に以下を実行:
     - `git branch --show-current` → `feat/42-feature-a` を検出
     - 対応するタスクファイル `.cursor/tasks/FEAT-42_feature-a.md` を読み込み
     - タスクを実装

3. **イシュー #43 のセットアップ（並列）**
   - 別のCursorウィンドウを開く
   - `~/projects/worktrees/feat-43-feature-b` を開く
   - 同様にAIがタスクを進行

4. **完了後のクリーンアップ**
   ```bash
   # 各worktreeでコミット・プッシュ
   cd ~/projects/worktrees/feat-42-feature-a
   git push origin feat/42-feature-a
   
   # メインリポジトリでworktreeを削除
   cd ~/projects/main
   git worktree remove ../worktrees/feat-42-feature-a
   ```

## 既存ワークフローとの統合

### @workflows/issue.mdc との統合

イシュー作成後のブランチ作成時に、worktreeとして作成するかどうかをユーザーに確認することが可能です（オプション）。

#### 拡張例

ユーザーが「イシュー #42 を作成しました。worktreeとして作業したいです。」と伝えた場合：

1. **ブランチ名を生成**: `feat/42-feature-a`
2. **worktreeとして作成**:
   ```bash
   git worktree add ../worktrees/feat-42-feature-a -b feat/42-feature-a main
   ```
3. **タスクファイルを作成**: `.cursor/tasks/FEAT-42_feature-a.md`
4. **ユーザーに通知**: 「worktree `../worktrees/feat-42-feature-a` を作成しました。Cursorで開いてください。」

### @workflows/task.mdc との統合

**重要**: `git branch --show-current` はworktree内でも正常に動作します。

- AIがworktree内で呼び出された場合、そのworktreeのブランチを正しく検出
- タスクファイルの検出・作成・更新ロジックは変更不要
- `.cursor/tasks/` ディレクトリも、そのブランチの内容に応じて存在します

#### 動作例

```bash
# worktree内でAIを呼び出す
cd ~/projects/worktrees/feat-42-feature-a

# AIの内部動作:
# 1. git branch --show-current → feat/42-feature-a
# 2. タスクファイル名を生成 → FEAT-42_feature-a.md
# 3. .cursor/tasks/FEAT-42_feature-a.md を読み込み
# 4. タスクを実装
```

#### タスクファイルの管理

- 各worktreeは独立した`.cursor/tasks/`ディレクトリを持ちます（そのブランチの内容）
- 新しいタスクファイルを作成した場合、そのworktreeでコミットし、mainブランチにマージすることで共有されます
- 推奨: タスクファイルはmainブランチで一元管理し、各ブランチで最新の状態を取り込む

## 注意点とベストプラクティス

### 注意点

1. **同じブランチを複数worktreeでcheckoutできない**
   - エラー: `fatal: 'feat/42-feature-a' is already checked out at '...'`
   - 解決策: 別のブランチを使用するか、既存のworktreeを削除

2. **worktree削除前に変更をコミット**
   - 未コミットの変更があると、`git worktree remove` が失敗する
   - 強制削除 (`--force`) は変更を失う可能性があるため注意

3. **worktreeのパスは相対パスでも絶対パスでもOK**
   - 推奨: メインリポジトリの親ディレクトリに `worktrees/` を作成
   - 例: `main/` と `worktrees/` を同じ階層に配置

### ベストプラクティス

1. **worktreeの命名規則**
   - ブランチ名と同じにすると分かりやすい
   - 例: `feat/42-feature-a` → `worktrees/feat-42-feature-a`（スラッシュをハイフンに変換）

2. **worktreeは一時的な作業環境**
   - 作業完了後は削除する
   - 長期的に使用する場合は、定期的に `git worktree list` で確認

3. **Cursorのウィンドウ管理**
   - 各worktreeを別のCursorウィンドウで開く
   - ウィンドウタイトルでブランチ名を確認

4. **並列作業の計画**
   - 互いに依存しないタスクを並列実行
   - ファイル競合を避けるため、異なるファイルを変更するタスクを選択

5. **定期的なクリーンアップ**
   ```bash
   # 不要なworktreeを削除
   git worktree list  # 確認
   git worktree remove <path>
   
   # 孤立したworktreeメタデータを削除
   git worktree prune
   ```

## 参考資料

### 公式ドキュメント
- [Git - git-worktree Documentation](https://git-scm.com/docs/git-worktree) - 公式ドキュメント

### 解説記事
- [徹底解説：git worktree の使い方](https://qiita.com/syukan3/items/dab71e88ce91bca44432) - 基本的な使い方
- [Git Worktreeをわかりやすく解説](https://zenn.dev/hiraoku/articles/56f4f9ffc6d186) - 初心者向け解説

### 関連ワークフロー
- @workflows/task.mdc - タスク管理ルール
- @workflows/issue.mdc - イシューワークフロー
