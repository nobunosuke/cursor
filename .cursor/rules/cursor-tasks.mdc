---
description: タスク管理ルール
alwaysApply: true
---

# タスク管理ルール

このプロジェクトでは、GitHubイシュー駆動開発を採用しています。すべてのブランチとタスクファイルは、GitHubイシューに紐づいています。

## 【重要】AI指示の原則

> **このセクションは最優先で理解してください**
> 
> すべてのルールの解釈・適用の基準となる原則です。

このルールファイルでAIに指示を与える際の基本原則：

- **確実性が必要な場合は具体的に**: ルールとして確実に守るべき手段や手順は、明確に具体的に記述する
- **目的達成が重要な場合は抽象的に**: 目的が達成できれば手段は問わない場合、AIが状況に応じてベストな方法を柔軟に選択できるよう、目的と理由を説明するに留める

AIは技術的な専門知識を持っているため、目的が明確であれば、具体的な指示よりも適切な判断を下せることが多い。

## 【重要】AIの振る舞いと責任

> **このセクションは最優先で理解してください**
> 
> AIとしての役割と責任を定義します。すべての行動の基準となります。

### 1. 主体的で建設的な姿勢

AIは単なる実装者ではなく、**技術的な専門家**として振る舞います：

- **イエスマンにならない**: より良い代替案があれば積極的に提案する
- **問題点の指摘**: 潜在的な課題やリスクがあれば率直に指摘する
- **ベストプラクティスの提案**: 技術的な最適解を常に考慮し、提案する

### 2. タスクファイルへの記録徹底

**目的**: チャットログは揮発し、会話を切り替えるとコンテキストは完全に失われます。次の会話でタスクを引き継げるよう、**すべての重要情報をタスクファイルに記録**してください。

**達成すべき状態**: 
- 別の会話セッションでタスクファイルを読んだときに、これまでの経緯・決定事項・現在の状態が理解できる
- タスクの次のステップが明確にわかる
- なぜその判断に至ったかの理由が追える

**記録の判断基準**: 「この情報がないと、次の会話で困るか？」を自問し、重要と判断したものは即座にタスクファイルに記録してください。容量は気にせず、詳細に記録することを優先してください。

### 3. 質問による背景知識の確認

**ユーザーはプロジェクトの背景知識を持っています。すぐに実装を始めず、まず質問してください。**

- 新しいタスクの背景や意図を確認する
- 不明点は推測せず率直に聞く
- 複数の実装方針が考えられる場合は、どちらを想定しているか確認する

## フォルダ構成

```
.cursor/
  tasks/
    {TYPE}-{ID}_{description}.md           # タスクファイル
    {TYPE}-{ID}_{description}.md           # タスクファイル
    ref/                                    # 参照情報ディレクトリ
      ref-{TYPE}-{ID}_{description}.md     # タスクに関連する参照情報
```

各タスクファイルは、対応するGitHubイシューとブランチに紐づいています。

## 命名規則

### ブランチ命名規則
`{type}/{id}-{description}`

`{id}` はGitHubイシュー番号です。

例:
- `docs/1-issue-driven` → GitHubイシュー #1
- `feat/42-user-authentication` → GitHubイシュー #42

### タスクファイル命名規則
`{TYPE}-{ID}_{description}.md`

`{ID}` はGitHubイシュー番号です（ブランチのIDと同じ）。

例:
- `DOCS-1_issue-driven.md` → GitHubイシュー #1
- `FEAT-42_user-authentication.md` → GitHubイシュー #42

### ブランチ名からタスクファイル名への変換
1. `{type}` を大文字に変換 → `{TYPE}`
2. `/` を `-` に置換
3. `-` の後の `{id}` をそのまま使用 → `{ID}`
4. 2番目の `-` 以降を `_` で区切る → `_{description}`

### 参照ファイル命名規則
`ref-{TYPE}-{ID}_{description}.md`

参照ファイルは、タスクに関連する軽量な参照情報を格納します（使い捨て想定）。

- `ref-` プレフィックスで参照ファイルであることを明示
- `{TYPE}-{ID}` でタスクファイルと紐づけ（イシュー番号）
- `tasks/ref/` ディレクトリに配置

例：
- `ref-FEAT-42_jwt-specification.md` → イシュー #42 の技術仕様
- `ref-DOCS-1_playbooks-format.md` → イシュー #1 の参考資料

**用途**: API仕様、設計メモ、外部リソース引用、一時的な技術情報

## タスクファイルの構造

各タスクファイルは以下のセクションで構成されます（[playbooks.com方式](https://playbooks.com/rules/task-lists)に準拠）：

### 必須セクション

#### 1. タイトルと説明
```markdown
# 機能名・タスク名

機能やタスクの目的と概要を簡潔に説明
```

#### 2. Completed Tasks
```markdown
## Completed Tasks

- [x] 完了したタスク1
- [x] 完了したタスク2
```

#### 3. In Progress Tasks
```markdown
## In Progress Tasks

- [ ] 現在進行中のタスク1
- [ ] 現在進行中のタスク2
```

#### 4. Future Tasks
```markdown
## Future Tasks

- [ ] 今後実装予定のタスク1
- [ ] 今後実装予定のタスク2
```

#### 5. Implementation Plan
```markdown
## Implementation Plan

### 目標
達成したい目標のリスト

### 要件・制約事項
- ユーザーからの明示的な要望
- 守るべき制約や前提条件
- 重要な非機能要件

### 検討事項・議論ログ
- 技術的な選択肢と比較
- AIからの提案と採用/不採用の理由
- ユーザーとの議論内容

### 決定事項
- 会話中に確定した重要な判断
- 変更があった場合は変更理由も記録

### アーキテクチャ
アーキテクチャに関する決定事項

### データフロー
データの流れの説明

### その他
技術的な詳細、環境設定など
```

#### 6. Relevant Files
```markdown
## Relevant Files

- path/to/file1.ts - ファイルの目的と説明
- path/to/file2.py - ファイルの目的と説明
- path/to/file3.md - ファイルの目的と説明
```

## AIによるタスク管理

### タスクファイルの自動検出と作成提案

ユーザーがAIを呼び出したとき：
1. `git branch --show-current` で現在のブランチ名を取得
2. ブランチ名からタスクファイル名を生成（上記の変換規則に従う）
3. `.cursor/tasks/` ディレクトリ内にタスクファイルが存在するか確認
4. 存在しない場合:
   - 「現在のブランチ `{branch_name}` に対応するタスクファイル `{task_file_name}` が見つかりません。作成しますか？」と提案
   - ユーザーが承認したら、playbooks.com形式のテンプレートでタスクファイルを作成

### タスクベースの開発ワークフロー

**基本原則**: タスクファイルは常に最新の状態を保つ。決定事項・進捗は**即座に**タスクファイルに反映すること。

```
┌─────────────────────────────────────────────────────────────────┐
│ タスクサイクル                                                      │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  1. タスクファイルを確認                                           │
│     ↓                                                           │
│  2. 次のタスクを Future Tasks → In Progress Tasks へ移動          │
│     ↓                                                           │
│  3. 実装（コード変更、ファイル作成・編集）                           │
│     ↓                                                           │
│  4. 即座に更新（同じツール呼び出しバッチ内で）                        │
│     - Relevant Files セクションを更新                              │
│     - 決定事項を Implementation Plan に記録                        │
│     - 新規タスク発見時は Future Tasks に追加                        │
│     ↓                                                           │
│  5. タスク完了時                                                  │
│     - In Progress Tasks → Completed Tasks へ移動                 │
│     - チェックマークを更新（[ ] → [x]）                             │
│     ↓                                                           │
│  6. 次のタスクへ（ステップ1に戻る）                                  │
│                                                                 │
└─────────────────────────────────────────────────────────────────┘

タスクの状態遷移:
Future Tasks → In Progress Tasks → Completed Tasks
   (予定)         (作業中)             (完了)
```

**原則**: タスクファイルは常に最新の状態を保ち、チャットログの揮発性を補完すること。実装と同じツール呼び出しバッチ内でタスクファイルを更新し、決定事項・進捗・ファイル変更を即座に記録してください。

## タスクのベストプラクティス

### タスクの粒度
- 1タスク = 30分〜2時間程度の作業量
- 細かすぎるタスク（「コメント追加」など）は避ける
- 大きすぎるタスクは複数に分割

### タスクの記述方法
- 動詞で始める（「実装する」「作成する」「修正する」など）
- 具体的で測定可能な内容にする
- 技術的な詳細を含める

例：
- ✅ 良い例: `ユーザー認証用のJWTトークン検証ミドルウェアを実装`
- ❌ 悪い例: `認証関連の作業`

## 参照ファイル（tasks/ref/）の管理

タスクファイルの Implementation Plan に書ききれない詳細情報は、参照ファイルに分離します。

### いつ作成するか

- API仕様、型定義などの技術仕様
- 外部ドキュメントの要約・引用
- 設計の議論メモ
- 一時的な技術情報

### 利用方法

- タスクファイルの "Relevant Files" に `ref-{TYPE}-{ID}_{description}.md` を記載
- `tasks/ref/` ディレクトリに配置

## 参考

- [playbooks.com - Task Lists](https://playbooks.com/rules/task-lists)
- [Cursor でのタスク管理方法・命名規則（Claude）](https://claude.ai/chat/e4659ca0-7a25-4bf7-a3d0-d06d18f0e84b)（人間用、AIはアクセスしない）
- @git/commit.mdc - コミット時のルールとメッセージ規約
