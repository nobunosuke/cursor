---
description: プルリクエストメッセージ作成ルール
alwaysApply: false
---

# プルリクエストメッセージ作成ルール

## 基本方針

プルリクメッセージは**簡潔で構造化され、変更内容が一目で分かる**ものにする。
冗長な説明は避け、diffから読み取れる事実を中心に記述する。

## 作成手順

### 1. 差分の確認

```bash
git diff main...HEAD
```

または

```bash
git log main..HEAD --oneline
```

### 2. テンプレートに沿って記述

以下のテンプレートを使用する。

## テンプレート（構造化・詳細型）

```markdown
## 目的
[このPRで何を達成するか、1行で簡潔に]

## 主な変更
**新規追加:**
- `path/to/file1` - 簡潔な説明
- `path/to/file2` - 簡潔な説明

**更新:**
- `path/to/file3` - 何を変更したか（行数を含めると良い）

**削除:**
- `path/to/file4` - 削除理由

## 導入される仕組み
1. [機能1の説明]
2. [機能2の説明]
3. [機能3の説明]
```

## 記述のポイント

### ✅ 良い例

1. **目的は1行で**
   ```markdown
   ## 目的
   Cursorでのブランチベース開発にタスク管理機能を統合
   ```

2. **ファイル変更は具体的に**
   ```markdown
   **新規追加:**
   - `.cursor/rules/01-task.mdc` - タスク管理の命名規則・構造・AI動作
   - `README.md` - タスク管理システムの使い方を追加（95行）
   ```

3. **仕組みは番号付きリストで**
   ```markdown
   ## 導入される仕組み
   1. ブランチを作成すると、AIがタスクファイルを自動提案
   2. 開発を進めながら、チェックリストが自動更新される
   3. すべてのタスクが完了したら、コミット・プッシュを提案
   ```

## 実際の使用方法

### AIに依頼する場合

```
現在のブランチのプルリクメッセージを作成して
```

AIは以下を実行：
1. `git diff main...HEAD` で差分を確認
2. `git log main..HEAD --oneline` でコミット履歴を確認
3. `.cursor/tasks/{TASK_FILE}.md` でタスク内容を確認
4. テンプレートに沿ってメッセージを生成
